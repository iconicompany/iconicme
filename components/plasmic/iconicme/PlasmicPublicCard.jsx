// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4WdhSVfyEYnextDzQgbzVw
// Component: rO6wCTk0u2Z1
import * as React from "react";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Card from "../../Card"; // plasmic-import: PTFjTPQ8SE6c/component
import { AntdRate } from "@plasmicpkgs/antd5/skinny/registerRate"; // plasmic-import: S802VXcWSh0n/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../applicant_tracking_system/plasmic_applicant_tracking_system.module.css"; // plasmic-import: 4WdhSVfyEYnextDzQgbzVw/projectcss
import sty from "./PlasmicPublicCard.module.css"; // plasmic-import: rO6wCTk0u2Z1/css

createPlasmicElementProxy;

export const PlasmicPublicCard__VariantProps = new Array();

export const PlasmicPublicCard__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPublicCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "rate.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 5
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.columns__ymBr4)}>
        <div className={classNames(projectcss.all, sty.column__vQn32)}>
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/iconicme/images/image.png",
              fullWidth: 577,
              fullHeight: 655,
              aspectRatio: undefined
            }}
          />
        </div>
        <div className={classNames(projectcss.all, sty.column__b8Yi)}>
          <Card
            data-plasmic-name={"card"}
            data-plasmic-override={overrides.card}
            className={classNames("__wab_instance", sty.card)}
            title={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nIuFp
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {
                        "\u0412\u044f\u0447\u0435\u0441\u043b\u0430\u0432 \u0411\u0438\u0440\u044e\u043a\u043e\u0432"
                      }
                    </h1>
                  }

                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
            }
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__s9ZCo
              )}
            >
              {
                "\u0412\u0435\u0431-\u0434\u0438\u0437\u0430\u0439\u043d\u0435\u0440, \u0420\u043e\u0441\u0441\u0438\u044f"
              }
            </div>
            <div className={classNames(projectcss.all, sty.columns__rVjYl)}>
              <div className={classNames(projectcss.all, sty.column__xieaj)}>
                <AntdRate
                  data-plasmic-name={"rate"}
                  data-plasmic-override={overrides.rate}
                  className={classNames("__wab_instance", sty.rate)}
                  defaultValue={5}
                  onChange={p.generateStateOnChangeProp($state, [
                    "rate",
                    "value"
                  ])}
                  symbols={
                    <React.Fragment>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jcmfn
                        )}
                      >
                        {"1"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jRu6W
                        )}
                      >
                        {"2"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2LWwl
                        )}
                      >
                        {"3"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yKn8
                        )}
                      >
                        {"4"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__v4AlC
                        )}
                      >
                        {"5"}
                      </div>
                    </React.Fragment>
                  }
                  value={p.generateStateValueProp($state, ["rate", "value"])}
                />
              </div>
              <div className={classNames(projectcss.all, sty.column__k1Wmo)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__c2Tzq
                  )}
                >
                  {"5 \u043e\u0446\u0435\u043d\u043e\u043a"}
                </div>
              </div>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nc45P
              )}
            >
              {"Enter some text"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2SuMa
              )}
            >
              {"something here"}
            </div>
          </Card>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "img", "card", "h1", "rate"],
  img: ["img"],
  card: ["card", "h1", "rate"],
  h1: ["h1"],
  rate: ["rate"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPublicCard__ArgProps,
          internalVariantPropNames: PlasmicPublicCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPublicCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPublicCard";
  } else {
    func.displayName = `PlasmicPublicCard.${nodeName}`;
  }
  return func;
}

export const PlasmicPublicCard = Object.assign(
  // Top-level PlasmicPublicCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    card: makeNodeComponent("card"),
    h1: makeNodeComponent("h1"),
    rate: makeNodeComponent("rate"),
    // Metadata about props expected for PlasmicPublicCard
    internalVariantProps: PlasmicPublicCard__VariantProps,
    internalArgProps: PlasmicPublicCard__ArgProps
  }
);

export default PlasmicPublicCard;
/* prettier-ignore-end */
