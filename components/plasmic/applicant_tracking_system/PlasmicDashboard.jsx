// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4WdhSVfyEYnextDzQgbzVw
// Component: rZP9tESvAibI
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PageLayout from "../../PageLayout"; // plasmic-import: 790e77KXjH90/component
import MetricCard from "../../MetricCard"; // plasmic-import: u7rHC_8tubwj/component
import { SimpleChart } from "@plasmicpkgs/react-chartjs-2"; // plasmic-import: 0Qywk3bhW-8/codeComponent
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton"; // plasmic-import: bx9Xzvf5_eu/codeComponent
import { RichTable } from "@plasmicpkgs/plasmic-rich-components"; // plasmic-import: k4RvFQUTZKCU/codeComponent
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components"; // plasmic-import: k4RvFQUTZKCU/codeComponentHelper
import { useScreenVariants as useScreenVariants_9MfIAg66EL9T } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 9mfIAg66eL9T/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_applicant_tracking_system.module.css"; // plasmic-import: 4WdhSVfyEYnextDzQgbzVw/projectcss
import sty from "./PlasmicDashboard.module.css"; // plasmic-import: rZP9tESvAibI/css

createPlasmicElementProxy;

export const PlasmicDashboard__VariantProps = new Array();

export const PlasmicDashboard__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDashboard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "positions.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: p.generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "positions.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: p.generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "positions.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: p.generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "positions.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: p.generateOnMutateForSpec(
          "selectedRowKeys",
          RichTable_Helpers
        )
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const new$Queries = {
    positions: usePlasmicDataOp(() => {
      return {
        sourceId: "bVbbifmpQzHjtg5zdWgt8C",
        opId: "574913f5-6fa7-42ca-bff4-d4dc42cb0c4a",
        userArgs: {},
        cacheKey: "plasmic.$..$..$.574913f5-6fa7-42ca-bff4-d4dc42cb0c4a.$.",
        invalidatedKeys: null,
        roleId: "3a39aa04-d095-4ea1-9803-57565a425707"
      };
    }),
    candidates: usePlasmicDataOp(() => {
      return {
        sourceId: "bVbbifmpQzHjtg5zdWgt8C",
        opId: "bac84976-a2c3-45a7-98c1-4b5989394e4f",
        userArgs: {},
        cacheKey: "plasmic.$..$..$.bac84976-a2c3-45a7-98c1-4b5989394e4f.$.",
        invalidatedKeys: null,
        roleId: "3a39aa04-d095-4ea1-9803-57565a425707"
      };
    }),
    hires: usePlasmicDataOp(() => {
      return {
        sourceId: "bVbbifmpQzHjtg5zdWgt8C",
        opId: "1df46f0c-4d50-4e28-af5b-d0d0692e94da",
        userArgs: {},
        cacheKey: "plasmic.$..$..$.1df46f0c-4d50-4e28-af5b-d0d0692e94da.$.",
        invalidatedKeys: null,
        roleId: "3a39aa04-d095-4ea1-9803-57565a425707"
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
  }
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_9MfIAg66EL9T()
  });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
            className={classNames("__wab_instance", sty.pageLayout)}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <section
                  data-plasmic-name={"section"}
                  data-plasmic-override={overrides.section}
                  className={classNames(projectcss.all, sty.section)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__cUqz)}
                  >
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__qPct
                      )}
                    >
                      {"Applicant Tracking Dashboard"}
                    </h4>
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__h20OX)}
                    >
                      <MetricCard
                        className={classNames(
                          "__wab_instance",
                          sty.metricCard__yqVj
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $queries.positions.data.length;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "#";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </MetricCard>
                      <MetricCard
                        className={classNames(
                          "__wab_instance",
                          sty.metricCard___36Hz2
                        )}
                        slot={"Active Candidates"}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $queries.candidates.data.filter(
                                c =>
                                  !c.status?.match(
                                    /Offer accepted|Offer declined|Reject before offer/
                                  )
                              ).length;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "#";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </MetricCard>
                      <MetricCard
                        className={classNames(
                          "__wab_instance",
                          sty.metricCard__kec9U
                        )}
                        slot={"Employee Referrals"}
                      >
                        {"46"}
                      </MetricCard>
                    </p.Stack>
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___62ZQy
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__pwXcI
                        )}
                      >
                        <h4
                          className={classNames(
                            projectcss.all,
                            projectcss.h4,
                            projectcss.__wab_text,
                            sty.h4___36BAd
                          )}
                        >
                          {"Interview-to-Hire Ratio"}
                        </h4>
                        <p
                          className={classNames(
                            projectcss.all,
                            projectcss.p,
                            projectcss.__wab_text,
                            sty.p__vnZa
                          )}
                        >
                          {"Jan 1, 2023 - June 30, 2023"}
                        </p>
                        <SimpleChart
                          className={classNames(
                            "__wab_instance",
                            sty.chart__xn0Ai
                          )}
                          data={(() => {
                            const byDept = ((
                              x = $queries.candidates.data,
                              f = c =>
                                $queries.positions.data.find(
                                  p => p.id === c.position_id
                                )?.dept,
                              r = {}
                            ) => (
                              x.forEach(v => (r[f(v)] ??= []).push(v)), r
                            ))();
                            for (const key in byDept) {
                              byDept[key] =
                                byDept[key]
                                  .map(a => a.status === "Offer accepted")
                                  .reduce((a, b) => a + b) / byDept[key].length;
                            }
                            return Object.entries(byDept).map(([k, v]) => ({
                              dept: k,
                              ratio: v
                            }));
                          })()}
                          interactive={true}
                          labelField={"dept"}
                        />
                      </p.Stack>
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__c6Kqg
                        )}
                      >
                        <h4
                          className={classNames(
                            projectcss.all,
                            projectcss.h4,
                            projectcss.__wab_text,
                            sty.h4__x4Rrv
                          )}
                        >
                          {"Applicant flow"}
                        </h4>
                        <p
                          className={classNames(
                            projectcss.all,
                            projectcss.p,
                            projectcss.__wab_text,
                            sty.p__dbod7
                          )}
                        >
                          {"Jan 1, 2023 - June 30, 2023"}
                        </p>
                        <SimpleChart
                          className={classNames(
                            "__wab_instance",
                            sty.chart__oj8Q7
                          )}
                          data={$queries.hires.data}
                          type={"line"}
                        />
                      </p.Stack>
                    </p.Stack>
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__inac5)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__s6WHg
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ji2JU
                          )}
                        >
                          <h4
                            className={classNames(
                              projectcss.all,
                              projectcss.h4,
                              projectcss.__wab_text,
                              sty.h4__jIqil
                            )}
                          >
                            {"Top Job Postings"}
                          </h4>
                          <p
                            className={classNames(
                              projectcss.all,
                              projectcss.p,
                              projectcss.__wab_text,
                              sty.p__auFc4
                            )}
                          >
                            {
                              "View the top job listings across your organization based on applicant numbers, views, and interview progress."
                            }
                          </p>
                        </p.Stack>
                        <AntdButton
                          data-plasmic-name={"button"}
                          data-plasmic-override={overrides.button}
                          className={classNames("__wab_instance", sty.button)}
                          size={"large"}
                          type={"primary"}
                        >
                          <div
                            data-plasmic-name={"text"}
                            data-plasmic-override={overrides.text}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text
                            )}
                          >
                            {"Add a job"}
                          </div>
                        </AntdButton>
                      </p.Stack>
                      {(() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.positions
                          ),
                          data: (() => {
                            try {
                              return $queries.positions;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          defaultSize: hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          )
                            ? "small"
                            : undefined,
                          fields: (() => {
                            const __composite = [
                              { key: "id", fieldId: "id", isHidden: null },
                              { key: "title", fieldId: "title" },
                              {
                                key: "description",
                                fieldId: "description",
                                isHidden: null
                              },
                              {
                                key: "department_id",
                                fieldId: "department_id",
                                title: null,
                                isHidden: null
                              },
                              {
                                key: "archived",
                                fieldId: "archived",
                                isHidden: null
                              },
                              { key: "created_at", fieldId: "created_at" },
                              { key: "dept", fieldId: "dept" },
                              {
                                key: "num_candidates",
                                fieldId: "num_candidates",
                                isHidden: null
                              },
                              {
                                key: "num_active_candidates",
                                fieldId: "num_active_candidates"
                              }
                            ];

                            __composite["0"]["isHidden"] = true;
                            __composite["2"]["isHidden"] = true;
                            __composite["3"]["title"] = "dept";
                            __composite["3"]["isHidden"] = true;
                            __composite["4"]["isHidden"] = true;
                            __composite["7"]["isHidden"] = true;
                            return __composite;
                          })(),
                          onRowSelectionChanged: async (...eventArgs) => {
                            p.generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRowKey",
                              ["positions", "selectedRowKey"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            p.generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRow",
                              ["positions", "selectedRow"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            p.generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRows",
                              ["positions", "selectedRows"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            p.generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRowKeys",
                              ["positions", "selectedRowKeys"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                          },
                          pageSize: 20,
                          scopeClassName: sty["positions__instance"],
                          selectedRowKey: p.generateStateValueProp($state, [
                            "positions",
                            "selectedRowKey"
                          ]),
                          selectedRowKeys: p.generateStateValueProp($state, [
                            "positions",
                            "selectedRowKeys"
                          ]),
                          themeResetClassName: classNames(
                            projectcss.root_reset,
                            projectcss.root_reset_tags,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens
                          )
                        };
                        p.initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "selectedRowKey",
                              plasmicStateName: "positions.selectedRowKey"
                            },
                            {
                              name: "selectedRow",
                              plasmicStateName: "positions.selectedRow"
                            },
                            {
                              name: "selectedRows",
                              plasmicStateName: "positions.selectedRows"
                            },
                            {
                              name: "selectedRowKeys",
                              plasmicStateName: "positions.selectedRowKeys"
                            }
                          ],

                          [],
                          RichTable_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <RichTable
                            data-plasmic-name={"positions"}
                            data-plasmic-override={overrides.positions}
                            {...child$Props}
                          />
                        );
                      })()}
                    </p.Stack>
                  </p.Stack>
                </section>
              )}
            </ph.DataCtxReader>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "pageLayout", "section", "button", "text", "positions"],
  pageLayout: ["pageLayout", "section", "button", "text", "positions"],
  section: ["section", "button", "text", "positions"],
  button: ["button", "text"],
  text: ["text"],
  positions: ["positions"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDashboard__ArgProps,
          internalVariantPropNames: PlasmicDashboard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDashboard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDashboard";
  } else {
    func.displayName = `PlasmicDashboard.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <p.PlasmicPageGuard
      minRole={"3a39aa04-d095-4ea1-9803-57565a425707"}
      appId={"4WdhSVfyEYnextDzQgbzVw"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "4WdhSVfyEYnextDzQgbzVw"
    });
    return (
      <p.PlasmicDataSourceContextProvider
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </p.PlasmicDataSourceContextProvider>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicDashboard = Object.assign(
  // Top-level PlasmicDashboard renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    section: makeNodeComponent("section"),
    button: makeNodeComponent("button"),
    text: makeNodeComponent("text"),
    positions: makeNodeComponent("positions"),
    // Metadata about props expected for PlasmicDashboard
    internalVariantProps: PlasmicDashboard__VariantProps,
    internalArgProps: PlasmicDashboard__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDashboard;
/* prettier-ignore-end */
